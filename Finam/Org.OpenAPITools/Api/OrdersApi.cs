/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels order.  Отменяет заявку.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account Id.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="transactionId">Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.  Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelOrderResultWebResponse</returns>
        CancelOrderResultWebResponse PublicApiV1OrdersDelete(string? clientId = default(string?), int? transactionId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Cancels order.  Отменяет заявку.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account Id.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="transactionId">Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.  Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelOrderResultWebResponse</returns>
        ApiResponse<CancelOrderResultWebResponse> PublicApiV1OrdersDeleteWithHttpInfo(string? clientId = default(string?), int? transactionId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns the list of orders.  Возвращает список заявок.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="includeMatched">Include executed orders in response.  Вернуть исполненные заявки. (optional)</param>
        /// <param name="includeCanceled">Include canceled orders in response.  Вернуть отмененные заявки. (optional)</param>
        /// <param name="includeActive">Include active orders in response.  Вернуть активные заявки. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOrdersResultWebResponse</returns>
        GetOrdersResultWebResponse PublicApiV1OrdersGet(string? clientId = default(string?), bool? includeMatched = default(bool?), bool? includeCanceled = default(bool?), bool? includeActive = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Returns the list of orders.  Возвращает список заявок.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="includeMatched">Include executed orders in response.  Вернуть исполненные заявки. (optional)</param>
        /// <param name="includeCanceled">Include canceled orders in response.  Вернуть отмененные заявки. (optional)</param>
        /// <param name="includeActive">Include active orders in response.  Вернуть активные заявки. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOrdersResultWebResponse</returns>
        ApiResponse<GetOrdersResultWebResponse> PublicApiV1OrdersGetWithHttpInfo(string? clientId = default(string?), bool? includeMatched = default(bool?), bool? includeCanceled = default(bool?), bool? includeActive = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Creates new order.  Order placement in OrderBook takes some time due to processing speed,  that is why this method returns transaction_id, which can be used  to find corresponding order in GetOrdersRequest or in OrderEvent message  of Events service (EventResponse.event.order).  Создать новую заявку.  На обработку нового поручения по размещению заявки в биржевой стакан  требуется некоторое время, поэтому этот метод возвращает структуру с  transaction_id, которая может быть использована для поиска соответствующей  заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий  (EventResponse.event.order).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrderRequest">The request received from the client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NewOrderResultWebResponse</returns>
        NewOrderResultWebResponse PublicApiV1OrdersPost(NewOrderRequest? newOrderRequest = default(NewOrderRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates new order.  Order placement in OrderBook takes some time due to processing speed,  that is why this method returns transaction_id, which can be used  to find corresponding order in GetOrdersRequest or in OrderEvent message  of Events service (EventResponse.event.order).  Создать новую заявку.  На обработку нового поручения по размещению заявки в биржевой стакан  требуется некоторое время, поэтому этот метод возвращает структуру с  transaction_id, которая может быть использована для поиска соответствующей  заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий  (EventResponse.event.order).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrderRequest">The request received from the client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NewOrderResultWebResponse</returns>
        ApiResponse<NewOrderResultWebResponse> PublicApiV1OrdersPostWithHttpInfo(NewOrderRequest? newOrderRequest = default(NewOrderRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancels order.  Отменяет заявку.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account Id.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="transactionId">Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.  Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrderResultWebResponse</returns>
        System.Threading.Tasks.Task<CancelOrderResultWebResponse> PublicApiV1OrdersDeleteAsync(string? clientId = default(string?), int? transactionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancels order.  Отменяет заявку.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account Id.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="transactionId">Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.  Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrderResultWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelOrderResultWebResponse>> PublicApiV1OrdersDeleteWithHttpInfoAsync(string? clientId = default(string?), int? transactionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of orders.  Возвращает список заявок.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="includeMatched">Include executed orders in response.  Вернуть исполненные заявки. (optional)</param>
        /// <param name="includeCanceled">Include canceled orders in response.  Вернуть отмененные заявки. (optional)</param>
        /// <param name="includeActive">Include active orders in response.  Вернуть активные заявки. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOrdersResultWebResponse</returns>
        System.Threading.Tasks.Task<GetOrdersResultWebResponse> PublicApiV1OrdersGetAsync(string? clientId = default(string?), bool? includeMatched = default(bool?), bool? includeCanceled = default(bool?), bool? includeActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of orders.  Возвращает список заявок.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="includeMatched">Include executed orders in response.  Вернуть исполненные заявки. (optional)</param>
        /// <param name="includeCanceled">Include canceled orders in response.  Вернуть отмененные заявки. (optional)</param>
        /// <param name="includeActive">Include active orders in response.  Вернуть активные заявки. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOrdersResultWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrdersResultWebResponse>> PublicApiV1OrdersGetWithHttpInfoAsync(string? clientId = default(string?), bool? includeMatched = default(bool?), bool? includeCanceled = default(bool?), bool? includeActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates new order.  Order placement in OrderBook takes some time due to processing speed,  that is why this method returns transaction_id, which can be used  to find corresponding order in GetOrdersRequest or in OrderEvent message  of Events service (EventResponse.event.order).  Создать новую заявку.  На обработку нового поручения по размещению заявки в биржевой стакан  требуется некоторое время, поэтому этот метод возвращает структуру с  transaction_id, которая может быть использована для поиска соответствующей  заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий  (EventResponse.event.order).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrderRequest">The request received from the client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewOrderResultWebResponse</returns>
        System.Threading.Tasks.Task<NewOrderResultWebResponse> PublicApiV1OrdersPostAsync(NewOrderRequest? newOrderRequest = default(NewOrderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates new order.  Order placement in OrderBook takes some time due to processing speed,  that is why this method returns transaction_id, which can be used  to find corresponding order in GetOrdersRequest or in OrderEvent message  of Events service (EventResponse.event.order).  Создать новую заявку.  На обработку нового поручения по размещению заявки в биржевой стакан  требуется некоторое время, поэтому этот метод возвращает структуру с  transaction_id, которая может быть использована для поиска соответствующей  заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий  (EventResponse.event.order).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrderRequest">The request received from the client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewOrderResultWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewOrderResultWebResponse>> PublicApiV1OrdersPostWithHttpInfoAsync(NewOrderRequest? newOrderRequest = default(NewOrderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancels order.  Отменяет заявку. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account Id.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="transactionId">Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.  Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelOrderResultWebResponse</returns>
        public CancelOrderResultWebResponse PublicApiV1OrdersDelete(string? clientId = default(string?), int? transactionId = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CancelOrderResultWebResponse> localVarResponse = PublicApiV1OrdersDeleteWithHttpInfo(clientId, transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels order.  Отменяет заявку. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account Id.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="transactionId">Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.  Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelOrderResultWebResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CancelOrderResultWebResponse> PublicApiV1OrdersDeleteWithHttpInfo(string? clientId = default(string?), int? transactionId = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientId", clientId));
            }
            if (transactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "TransactionId", transactionId));
            }

            localVarRequestOptions.Operation = "OrdersApi.PublicApiV1OrdersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CancelOrderResultWebResponse>("/public/api/v1/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublicApiV1OrdersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels order.  Отменяет заявку. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account Id.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="transactionId">Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.  Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrderResultWebResponse</returns>
        public async System.Threading.Tasks.Task<CancelOrderResultWebResponse> PublicApiV1OrdersDeleteAsync(string? clientId = default(string?), int? transactionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CancelOrderResultWebResponse> localVarResponse = await PublicApiV1OrdersDeleteWithHttpInfoAsync(clientId, transactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels order.  Отменяет заявку. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account Id.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="transactionId">Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.  Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrderResultWebResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CancelOrderResultWebResponse>> PublicApiV1OrdersDeleteWithHttpInfoAsync(string? clientId = default(string?), int? transactionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientId", clientId));
            }
            if (transactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "TransactionId", transactionId));
            }

            localVarRequestOptions.Operation = "OrdersApi.PublicApiV1OrdersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CancelOrderResultWebResponse>("/public/api/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublicApiV1OrdersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of orders.  Возвращает список заявок. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="includeMatched">Include executed orders in response.  Вернуть исполненные заявки. (optional)</param>
        /// <param name="includeCanceled">Include canceled orders in response.  Вернуть отмененные заявки. (optional)</param>
        /// <param name="includeActive">Include active orders in response.  Вернуть активные заявки. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOrdersResultWebResponse</returns>
        public GetOrdersResultWebResponse PublicApiV1OrdersGet(string? clientId = default(string?), bool? includeMatched = default(bool?), bool? includeCanceled = default(bool?), bool? includeActive = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetOrdersResultWebResponse> localVarResponse = PublicApiV1OrdersGetWithHttpInfo(clientId, includeMatched, includeCanceled, includeActive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of orders.  Возвращает список заявок. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="includeMatched">Include executed orders in response.  Вернуть исполненные заявки. (optional)</param>
        /// <param name="includeCanceled">Include canceled orders in response.  Вернуть отмененные заявки. (optional)</param>
        /// <param name="includeActive">Include active orders in response.  Вернуть активные заявки. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOrdersResultWebResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetOrdersResultWebResponse> PublicApiV1OrdersGetWithHttpInfo(string? clientId = default(string?), bool? includeMatched = default(bool?), bool? includeCanceled = default(bool?), bool? includeActive = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientId", clientId));
            }
            if (includeMatched != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeMatched", includeMatched));
            }
            if (includeCanceled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeCanceled", includeCanceled));
            }
            if (includeActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeActive", includeActive));
            }

            localVarRequestOptions.Operation = "OrdersApi.PublicApiV1OrdersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetOrdersResultWebResponse>("/public/api/v1/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublicApiV1OrdersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of orders.  Возвращает список заявок. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="includeMatched">Include executed orders in response.  Вернуть исполненные заявки. (optional)</param>
        /// <param name="includeCanceled">Include canceled orders in response.  Вернуть отмененные заявки. (optional)</param>
        /// <param name="includeActive">Include active orders in response.  Вернуть активные заявки. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOrdersResultWebResponse</returns>
        public async System.Threading.Tasks.Task<GetOrdersResultWebResponse> PublicApiV1OrdersGetAsync(string? clientId = default(string?), bool? includeMatched = default(bool?), bool? includeCanceled = default(bool?), bool? includeActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetOrdersResultWebResponse> localVarResponse = await PublicApiV1OrdersGetWithHttpInfoAsync(clientId, includeMatched, includeCanceled, includeActive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of orders.  Возвращает список заявок. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта. (optional)</param>
        /// <param name="includeMatched">Include executed orders in response.  Вернуть исполненные заявки. (optional)</param>
        /// <param name="includeCanceled">Include canceled orders in response.  Вернуть отмененные заявки. (optional)</param>
        /// <param name="includeActive">Include active orders in response.  Вернуть активные заявки. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOrdersResultWebResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetOrdersResultWebResponse>> PublicApiV1OrdersGetWithHttpInfoAsync(string? clientId = default(string?), bool? includeMatched = default(bool?), bool? includeCanceled = default(bool?), bool? includeActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientId", clientId));
            }
            if (includeMatched != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeMatched", includeMatched));
            }
            if (includeCanceled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeCanceled", includeCanceled));
            }
            if (includeActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeActive", includeActive));
            }

            localVarRequestOptions.Operation = "OrdersApi.PublicApiV1OrdersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetOrdersResultWebResponse>("/public/api/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublicApiV1OrdersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new order.  Order placement in OrderBook takes some time due to processing speed,  that is why this method returns transaction_id, which can be used  to find corresponding order in GetOrdersRequest or in OrderEvent message  of Events service (EventResponse.event.order).  Создать новую заявку.  На обработку нового поручения по размещению заявки в биржевой стакан  требуется некоторое время, поэтому этот метод возвращает структуру с  transaction_id, которая может быть использована для поиска соответствующей  заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий  (EventResponse.event.order). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrderRequest">The request received from the client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NewOrderResultWebResponse</returns>
        public NewOrderResultWebResponse PublicApiV1OrdersPost(NewOrderRequest? newOrderRequest = default(NewOrderRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<NewOrderResultWebResponse> localVarResponse = PublicApiV1OrdersPostWithHttpInfo(newOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new order.  Order placement in OrderBook takes some time due to processing speed,  that is why this method returns transaction_id, which can be used  to find corresponding order in GetOrdersRequest or in OrderEvent message  of Events service (EventResponse.event.order).  Создать новую заявку.  На обработку нового поручения по размещению заявки в биржевой стакан  требуется некоторое время, поэтому этот метод возвращает структуру с  transaction_id, которая может быть использована для поиска соответствующей  заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий  (EventResponse.event.order). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrderRequest">The request received from the client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NewOrderResultWebResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<NewOrderResultWebResponse> PublicApiV1OrdersPostWithHttpInfo(NewOrderRequest? newOrderRequest = default(NewOrderRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newOrderRequest;

            localVarRequestOptions.Operation = "OrdersApi.PublicApiV1OrdersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NewOrderResultWebResponse>("/public/api/v1/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublicApiV1OrdersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new order.  Order placement in OrderBook takes some time due to processing speed,  that is why this method returns transaction_id, which can be used  to find corresponding order in GetOrdersRequest or in OrderEvent message  of Events service (EventResponse.event.order).  Создать новую заявку.  На обработку нового поручения по размещению заявки в биржевой стакан  требуется некоторое время, поэтому этот метод возвращает структуру с  transaction_id, которая может быть использована для поиска соответствующей  заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий  (EventResponse.event.order). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrderRequest">The request received from the client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewOrderResultWebResponse</returns>
        public async System.Threading.Tasks.Task<NewOrderResultWebResponse> PublicApiV1OrdersPostAsync(NewOrderRequest? newOrderRequest = default(NewOrderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<NewOrderResultWebResponse> localVarResponse = await PublicApiV1OrdersPostWithHttpInfoAsync(newOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new order.  Order placement in OrderBook takes some time due to processing speed,  that is why this method returns transaction_id, which can be used  to find corresponding order in GetOrdersRequest or in OrderEvent message  of Events service (EventResponse.event.order).  Создать новую заявку.  На обработку нового поручения по размещению заявки в биржевой стакан  требуется некоторое время, поэтому этот метод возвращает структуру с  transaction_id, которая может быть использована для поиска соответствующей  заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий  (EventResponse.event.order). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrderRequest">The request received from the client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewOrderResultWebResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<NewOrderResultWebResponse>> PublicApiV1OrdersPostWithHttpInfoAsync(NewOrderRequest? newOrderRequest = default(NewOrderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newOrderRequest;

            localVarRequestOptions.Operation = "OrdersApi.PublicApiV1OrdersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewOrderResultWebResponse>("/public/api/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublicApiV1OrdersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
