/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StopLoss order.  Стоп лосс заявка.
    /// </summary>
    [DataContract(Name = "StopLoss")]
    public partial class StopLoss : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StopLoss" /> class.
        /// </summary>
        /// <param name="activationPrice">Activation price.  Цена активации..</param>
        /// <param name="price">Price.  Цена заявки..</param>
        /// <param name="marketPrice">Market price.  По рынку..</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="time">Time, seconds.  Защитное время, сек..</param>
        /// <param name="useCredit">Use credit.  Использовать кредит..</param>
        public StopLoss(double activationPrice = default(double), double price = default(double), bool marketPrice = default(bool), StopQuantity quantity = default(StopQuantity), int time = default(int), bool useCredit = default(bool))
        {
            this.ActivationPrice = activationPrice;
            this.Price = price;
            this.MarketPrice = marketPrice;
            this.Quantity = quantity;
            this.Time = time;
            this.UseCredit = useCredit;
        }

        /// <summary>
        /// Activation price.  Цена активации.
        /// </summary>
        /// <value>Activation price.  Цена активации.</value>
        [DataMember(Name = "activationPrice", EmitDefaultValue = false)]
        public double ActivationPrice { get; set; }

        /// <summary>
        /// Price.  Цена заявки.
        /// </summary>
        /// <value>Price.  Цена заявки.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Market price.  По рынку.
        /// </summary>
        /// <value>Market price.  По рынку.</value>
        [DataMember(Name = "marketPrice", EmitDefaultValue = true)]
        public bool MarketPrice { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public StopQuantity Quantity { get; set; }

        /// <summary>
        /// Time, seconds.  Защитное время, сек.
        /// </summary>
        /// <value>Time, seconds.  Защитное время, сек.</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public int Time { get; set; }

        /// <summary>
        /// Use credit.  Использовать кредит.
        /// </summary>
        /// <value>Use credit.  Использовать кредит.</value>
        [DataMember(Name = "useCredit", EmitDefaultValue = true)]
        public bool UseCredit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StopLoss {\n");
            sb.Append("  ActivationPrice: ").Append(ActivationPrice).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  MarketPrice: ").Append(MarketPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  UseCredit: ").Append(UseCredit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
