/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetPortfolioRequest result.  Результат GetPortfolioRequest.
    /// </summary>
    [DataContract(Name = "GetPortfolioResult")]
    public partial class GetPortfolioResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPortfolioResult" /> class.
        /// </summary>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта..</param>
        /// <param name="content">content.</param>
        /// <param name="equity">Current equity, RUB.  Текущая оценка портфеля в рублях..</param>
        /// <param name="balance">Open Equity, RUB.  Входящая оценка портфеля в рублях..</param>
        public GetPortfolioResult(string clientId = default(string), PortfolioContent content = default(PortfolioContent), double equity = default(double), double balance = default(double))
        {
            this.ClientId = clientId;
            this.Content = content;
            this.Equity = equity;
            this.Balance = balance;
        }

        /// <summary>
        /// Trade Account ID.  Идентификатор торгового счёта.
        /// </summary>
        /// <value>Trade Account ID.  Идентификатор торгового счёта.</value>
        [DataMember(Name = "clientId", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public PortfolioContent Content { get; set; }

        /// <summary>
        /// Current equity, RUB.  Текущая оценка портфеля в рублях.
        /// </summary>
        /// <value>Current equity, RUB.  Текущая оценка портфеля в рублях.</value>
        [DataMember(Name = "equity", EmitDefaultValue = false)]
        public double Equity { get; set; }

        /// <summary>
        /// Open Equity, RUB.  Входящая оценка портфеля в рублях.
        /// </summary>
        /// <value>Open Equity, RUB.  Входящая оценка портфеля в рублях.</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public double Balance { get; set; }

        /// <summary>
        /// DEPO positions.  Позиции DEPO.
        /// </summary>
        /// <value>DEPO positions.  Позиции DEPO.</value>
        [DataMember(Name = "positions", EmitDefaultValue = true)]
        public List<PositionRow> Positions { get; private set; }

        /// <summary>
        /// Returns false as Positions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePositions()
        {
            return false;
        }
        /// <summary>
        /// Currency positions.  Валютные позиции.
        /// </summary>
        /// <value>Currency positions.  Валютные позиции.</value>
        [DataMember(Name = "currencies", EmitDefaultValue = true)]
        public List<CurrencyRow> Currencies { get; private set; }

        /// <summary>
        /// Returns false as Currencies should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencies()
        {
            return false;
        }
        /// <summary>
        /// Money positions.  Денежные позиции.
        /// </summary>
        /// <value>Money positions.  Денежные позиции.</value>
        [DataMember(Name = "money", EmitDefaultValue = true)]
        public List<MoneyRow> Money { get; private set; }

        /// <summary>
        /// Returns false as Money should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMoney()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPortfolioResult {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("  Money: ").Append(Money).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
