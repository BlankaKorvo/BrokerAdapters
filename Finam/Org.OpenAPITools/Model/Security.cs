/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Security.  Инструмент.
    /// </summary>
    [DataContract(Name = "Security")]
    public partial class Security : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public Market? Market { get; set; }

        /// <summary>
        /// Gets or Sets PriceSign
        /// </summary>
        [DataMember(Name = "priceSign", EmitDefaultValue = false)]
        public PriceSign? PriceSign { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Security" /> class.
        /// </summary>
        /// <param name="code">Security code.  Код инструмента..</param>
        /// <param name="board">Security board.  Основной режим торгов инструмента..</param>
        /// <param name="market">market.</param>
        /// <param name="decimals">Number of decimal digits in the price value.  Количество знаков в дробной части цены..</param>
        /// <param name="lotSize">Lot size.  Размер лота..</param>
        /// <param name="minStep">Price min step.  Минимальный шаг цены..</param>
        /// <param name="currency">Currency.  Валюта номинала инструмента..</param>
        /// <param name="shortName">Security name.  Название инструмента..</param>
        /// <param name="properties">Параметры инструмента. Значение представлено в виде битовой маски.  0 Нет параметров.  1 Инструмент торгуется на Бирже.  2 Инструмент допущен к торгам у Брокера - существенно для НЕ ГЛАВНЫХ трейдеров, главным доступны все инструменты, торгуемые на биржах.  4 Рыночные заявки (без ограничения по цене) разрешены.  8 Признак маржинальности бумаги.  16 Опцион Call.  32 Опцион Put.  48 Фьючерс: Call | Put.  64 Разрешен для резидентов.  128 Разрешен для нерезидентов..</param>
        /// <param name="timeZoneName">Timezone name.  Имя таймзоны..</param>
        /// <param name="bpCost">The price unit cost for one security (not for the lot)), excluding accrued interest.  Стоимость пункта цены одного инструмента (не лота), без учета НКД..</param>
        /// <param name="accruedInterest">Current accrued interest.  Текущий НКД..</param>
        /// <param name="priceSign">priceSign.</param>
        /// <param name="ticker">Ticker.  Код инструмента (тикер) на биржевой площадке листинга..</param>
        /// <param name="lotDivider">The split ratio of a security in one standard lot.  Коэффициент дробления ценной бумаги в одном стандартном лоте..</param>
        public Security(string code = default(string), string board = default(string), Market? market = default(Market?), int decimals = default(int), int lotSize = default(int), int minStep = default(int), string currency = default(string), string shortName = default(string), int properties = default(int), string timeZoneName = default(string), double bpCost = default(double), double accruedInterest = default(double), PriceSign? priceSign = default(PriceSign?), string ticker = default(string), int lotDivider = default(int))
        {
            this.Code = code;
            this.Board = board;
            this.Market = market;
            this.Decimals = decimals;
            this.LotSize = lotSize;
            this.MinStep = minStep;
            this.Currency = currency;
            this.ShortName = shortName;
            this.Properties = properties;
            this.TimeZoneName = timeZoneName;
            this.BpCost = bpCost;
            this.AccruedInterest = accruedInterest;
            this.PriceSign = priceSign;
            this.Ticker = ticker;
            this.LotDivider = lotDivider;
        }

        /// <summary>
        /// Security code.  Код инструмента.
        /// </summary>
        /// <value>Security code.  Код инструмента.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Security board.  Основной режим торгов инструмента.
        /// </summary>
        /// <value>Security board.  Основной режим торгов инструмента.</value>
        [DataMember(Name = "board", EmitDefaultValue = true)]
        public string Board { get; set; }

        /// <summary>
        /// Number of decimal digits in the price value.  Количество знаков в дробной части цены.
        /// </summary>
        /// <value>Number of decimal digits in the price value.  Количество знаков в дробной части цены.</value>
        [DataMember(Name = "decimals", EmitDefaultValue = false)]
        public int Decimals { get; set; }

        /// <summary>
        /// Lot size.  Размер лота.
        /// </summary>
        /// <value>Lot size.  Размер лота.</value>
        [DataMember(Name = "lotSize", EmitDefaultValue = false)]
        public int LotSize { get; set; }

        /// <summary>
        /// Price min step.  Минимальный шаг цены.
        /// </summary>
        /// <value>Price min step.  Минимальный шаг цены.</value>
        [DataMember(Name = "minStep", EmitDefaultValue = false)]
        public int MinStep { get; set; }

        /// <summary>
        /// Currency.  Валюта номинала инструмента.
        /// </summary>
        /// <value>Currency.  Валюта номинала инструмента.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Security name.  Название инструмента.
        /// </summary>
        /// <value>Security name.  Название инструмента.</value>
        [DataMember(Name = "shortName", EmitDefaultValue = true)]
        public string ShortName { get; set; }

        /// <summary>
        /// Параметры инструмента. Значение представлено в виде битовой маски.  0 Нет параметров.  1 Инструмент торгуется на Бирже.  2 Инструмент допущен к торгам у Брокера - существенно для НЕ ГЛАВНЫХ трейдеров, главным доступны все инструменты, торгуемые на биржах.  4 Рыночные заявки (без ограничения по цене) разрешены.  8 Признак маржинальности бумаги.  16 Опцион Call.  32 Опцион Put.  48 Фьючерс: Call | Put.  64 Разрешен для резидентов.  128 Разрешен для нерезидентов.
        /// </summary>
        /// <value>Параметры инструмента. Значение представлено в виде битовой маски.  0 Нет параметров.  1 Инструмент торгуется на Бирже.  2 Инструмент допущен к торгам у Брокера - существенно для НЕ ГЛАВНЫХ трейдеров, главным доступны все инструменты, торгуемые на биржах.  4 Рыночные заявки (без ограничения по цене) разрешены.  8 Признак маржинальности бумаги.  16 Опцион Call.  32 Опцион Put.  48 Фьючерс: Call | Put.  64 Разрешен для резидентов.  128 Разрешен для нерезидентов.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public int Properties { get; set; }

        /// <summary>
        /// Timezone name.  Имя таймзоны.
        /// </summary>
        /// <value>Timezone name.  Имя таймзоны.</value>
        [DataMember(Name = "timeZoneName", EmitDefaultValue = true)]
        public string TimeZoneName { get; set; }

        /// <summary>
        /// The price unit cost for one security (not for the lot)), excluding accrued interest.  Стоимость пункта цены одного инструмента (не лота), без учета НКД.
        /// </summary>
        /// <value>The price unit cost for one security (not for the lot)), excluding accrued interest.  Стоимость пункта цены одного инструмента (не лота), без учета НКД.</value>
        [DataMember(Name = "bpCost", EmitDefaultValue = false)]
        public double BpCost { get; set; }

        /// <summary>
        /// Current accrued interest.  Текущий НКД.
        /// </summary>
        /// <value>Current accrued interest.  Текущий НКД.</value>
        [DataMember(Name = "accruedInterest", EmitDefaultValue = false)]
        public double AccruedInterest { get; set; }

        /// <summary>
        /// Ticker.  Код инструмента (тикер) на биржевой площадке листинга.
        /// </summary>
        /// <value>Ticker.  Код инструмента (тикер) на биржевой площадке листинга.</value>
        [DataMember(Name = "ticker", EmitDefaultValue = true)]
        public string Ticker { get; set; }

        /// <summary>
        /// The split ratio of a security in one standard lot.  Коэффициент дробления ценной бумаги в одном стандартном лоте.
        /// </summary>
        /// <value>The split ratio of a security in one standard lot.  Коэффициент дробления ценной бумаги в одном стандартном лоте.</value>
        [DataMember(Name = "lotDivider", EmitDefaultValue = false)]
        public int LotDivider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Security {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Board: ").Append(Board).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  LotSize: ").Append(LotSize).Append("\n");
            sb.Append("  MinStep: ").Append(MinStep).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  TimeZoneName: ").Append(TimeZoneName).Append("\n");
            sb.Append("  BpCost: ").Append(BpCost).Append("\n");
            sb.Append("  AccruedInterest: ").Append(AccruedInterest).Append("\n");
            sb.Append("  PriceSign: ").Append(PriceSign).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  LotDivider: ").Append(LotDivider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
