/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// New Order Request.  Запрос на создание заявки.
    /// </summary>
    [DataContract(Name = "NewOrderRequest")]
    public partial class NewOrderRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BuySell
        /// </summary>
        [DataMember(Name = "buySell", EmitDefaultValue = false)]
        public BuySell? BuySell { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name = "property", EmitDefaultValue = false)]
        public OrderProperty? Property { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewOrderRequest" /> class.
        /// </summary>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта..</param>
        /// <param name="securityBoard">Trading Board.  Режим торгов..</param>
        /// <param name="securityCode">Security Code.  Тикер инструмента..</param>
        /// <param name="buySell">buySell.</param>
        /// <param name="quantity">Order volume in lots.  Количество лотов инструмента для заявки..</param>
        /// <param name="useCredit">Use credit. Not available in derivative market.  Использовать кредит. Недоступно для срочного рынка..</param>
        /// <param name="price">Order price. Use \&quot;null\&quot; to place Market Order.  Цена заявки. Используйте \&quot;null\&quot;, чтобы выставить рыночную заявку..</param>
        /// <param name="property">property.</param>
        /// <param name="condition">condition.</param>
        /// <param name="validBefore">validBefore.</param>
        public NewOrderRequest(string clientId = default(string), string securityBoard = default(string), string securityCode = default(string), BuySell? buySell = default(BuySell?), int quantity = default(int), bool useCredit = default(bool), double? price = default(double?), OrderProperty? property = default(OrderProperty?), OrderCondition condition = default(OrderCondition), OrderValidBefore validBefore = default(OrderValidBefore))
        {
            this.ClientId = clientId;
            this.SecurityBoard = securityBoard;
            this.SecurityCode = securityCode;
            this.BuySell = buySell;
            this.Quantity = quantity;
            this.UseCredit = useCredit;
            this.Price = price;
            this.Property = property;
            this.Condition = condition;
            this.ValidBefore = validBefore;
        }

        /// <summary>
        /// Trade Account ID.  Идентификатор торгового счёта.
        /// </summary>
        /// <value>Trade Account ID.  Идентификатор торгового счёта.</value>
        [DataMember(Name = "clientId", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Trading Board.  Режим торгов.
        /// </summary>
        /// <value>Trading Board.  Режим торгов.</value>
        [DataMember(Name = "securityBoard", EmitDefaultValue = true)]
        public string SecurityBoard { get; set; }

        /// <summary>
        /// Security Code.  Тикер инструмента.
        /// </summary>
        /// <value>Security Code.  Тикер инструмента.</value>
        [DataMember(Name = "securityCode", EmitDefaultValue = true)]
        public string SecurityCode { get; set; }

        /// <summary>
        /// Order volume in lots.  Количество лотов инструмента для заявки.
        /// </summary>
        /// <value>Order volume in lots.  Количество лотов инструмента для заявки.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Use credit. Not available in derivative market.  Использовать кредит. Недоступно для срочного рынка.
        /// </summary>
        /// <value>Use credit. Not available in derivative market.  Использовать кредит. Недоступно для срочного рынка.</value>
        [DataMember(Name = "useCredit", EmitDefaultValue = true)]
        public bool UseCredit { get; set; }

        /// <summary>
        /// Order price. Use \&quot;null\&quot; to place Market Order.  Цена заявки. Используйте \&quot;null\&quot;, чтобы выставить рыночную заявку.
        /// </summary>
        /// <value>Order price. Use \&quot;null\&quot; to place Market Order.  Цена заявки. Используйте \&quot;null\&quot;, чтобы выставить рыночную заявку.</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public OrderCondition Condition { get; set; }

        /// <summary>
        /// Gets or Sets ValidBefore
        /// </summary>
        [DataMember(Name = "validBefore", EmitDefaultValue = false)]
        public OrderValidBefore ValidBefore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NewOrderRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  SecurityBoard: ").Append(SecurityBoard).Append("\n");
            sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            sb.Append("  BuySell: ").Append(BuySell).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UseCredit: ").Append(UseCredit).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ValidBefore: ").Append(ValidBefore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
