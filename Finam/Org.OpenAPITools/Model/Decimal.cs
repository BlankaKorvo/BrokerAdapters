/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Real number with fixed precision (including integers).  The total value is calculated as follows: num * 10^-scale.  https://en.wikipedia.org/wiki/Scientific_notation  Example:  The number \&quot;250.655\&quot; is Decimal type with num &#x3D; 250655 and scale &#x3D; 3, 250.655 &#x3D; 250655 * 10^-3
    /// </summary>
    [DataContract(Name = "Decimal")]
    public partial class Decimal : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Decimal" /> class.
        /// </summary>
        /// <param name="num">Mantissa.  Мантисса..</param>
        /// <param name="scale">exponent for base 10.  Экспонента..</param>
        public Decimal(long num = default(long), int scale = default(int))
        {
            this.Num = num;
            this.Scale = scale;
        }

        /// <summary>
        /// Mantissa.  Мантисса.
        /// </summary>
        /// <value>Mantissa.  Мантисса.</value>
        [DataMember(Name = "num", EmitDefaultValue = false)]
        public long Num { get; set; }

        /// <summary>
        /// exponent for base 10.  Экспонента.
        /// </summary>
        /// <value>exponent for base 10.  Экспонента.</value>
        [DataMember(Name = "scale", EmitDefaultValue = false)]
        public int Scale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Decimal {\n");
            sb.Append("  Num: ").Append(Num).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
