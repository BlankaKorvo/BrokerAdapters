/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Stop Order.  Стоп-заявка.
    /// </summary>
    [DataContract(Name = "Stop")]
    public partial class Stop : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public Market? Market { get; set; }

        /// <summary>
        /// Gets or Sets BuySell
        /// </summary>
        [DataMember(Name = "buySell", EmitDefaultValue = false)]
        public BuySell? BuySell { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StopStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Stop" /> class.
        /// </summary>
        /// <param name="stopId">Stop Order Id.  Идентификатор стоп-заявки..</param>
        /// <param name="securityCode">Security Code.  Тикер инструмента..</param>
        /// <param name="securityBoard">Security Board.  Основной режим торгов инструмента..</param>
        /// <param name="market">market.</param>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта..</param>
        /// <param name="buySell">buySell.</param>
        /// <param name="expirationDate">Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC..</param>
        /// <param name="linkOrder">Linked order ID.  Биржевой номер связанной (активной) заявки..</param>
        /// <param name="validBefore">validBefore.</param>
        /// <param name="status">status.</param>
        /// <param name="message">Rejection reason or conditional order resolution.  Причина отказа или вердикт по условной заявке..</param>
        /// <param name="orderNo">Order No.  Номер заявки, полученной в результате исполнения стопа..</param>
        /// <param name="tradeNo">Trade No.  Номер сделки, которая привела к исполнению стопа..</param>
        /// <param name="acceptedAt">Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC..</param>
        /// <param name="canceledAt">Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC..</param>
        /// <param name="currency">Price currency.  Валюта цены..</param>
        /// <param name="takeProfitExtremum">Take profit: local extremum.  Тейк профит: текущий локальный экстремум..</param>
        /// <param name="takeProfitLevel">Take profit: correction level.  Тейк профит: текущий уровень коррекции..</param>
        /// <param name="stopLoss">stopLoss.</param>
        /// <param name="takeProfit">takeProfit.</param>
        public Stop(int stopId = default(int), string securityCode = default(string), string securityBoard = default(string), Market? market = default(Market?), string clientId = default(string), BuySell? buySell = default(BuySell?), DateOnly? expirationDate = default(DateOnly?), long linkOrder = default(long), OrderValidBefore validBefore = default(OrderValidBefore), StopStatus? status = default(StopStatus?), string message = default(string), long orderNo = default(long), long tradeNo = default(long), DateOnly? acceptedAt = default(DateOnly?), DateOnly? canceledAt = default(DateOnly?), string currency = default(string), double takeProfitExtremum = default(double), double takeProfitLevel = default(double), StopLoss stopLoss = default(StopLoss), TakeProfit takeProfit = default(TakeProfit))
        {
            this.StopId = stopId;
            this.SecurityCode = securityCode;
            this.SecurityBoard = securityBoard;
            this.Market = market;
            this.ClientId = clientId;
            this.BuySell = buySell;
            this.ExpirationDate = expirationDate;
            this.LinkOrder = linkOrder;
            this.ValidBefore = validBefore;
            this.Status = status;
            this.Message = message;
            this.OrderNo = orderNo;
            this.TradeNo = tradeNo;
            this.AcceptedAt = acceptedAt;
            this.CanceledAt = canceledAt;
            this.Currency = currency;
            this.TakeProfitExtremum = takeProfitExtremum;
            this.TakeProfitLevel = takeProfitLevel;
            this.StopLoss = stopLoss;
            this.TakeProfit = takeProfit;
        }

        /// <summary>
        /// Stop Order Id.  Идентификатор стоп-заявки.
        /// </summary>
        /// <value>Stop Order Id.  Идентификатор стоп-заявки.</value>
        [DataMember(Name = "stopId", EmitDefaultValue = false)]
        public int StopId { get; set; }

        /// <summary>
        /// Security Code.  Тикер инструмента.
        /// </summary>
        /// <value>Security Code.  Тикер инструмента.</value>
        [DataMember(Name = "securityCode", EmitDefaultValue = true)]
        public string SecurityCode { get; set; }

        /// <summary>
        /// Security Board.  Основной режим торгов инструмента.
        /// </summary>
        /// <value>Security Board.  Основной режим торгов инструмента.</value>
        [DataMember(Name = "securityBoard", EmitDefaultValue = true)]
        public string SecurityBoard { get; set; }

        /// <summary>
        /// Trade Account ID.  Идентификатор торгового счёта.
        /// </summary>
        /// <value>Trade Account ID.  Идентификатор торгового счёта.</value>
        [DataMember(Name = "clientId", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.
        /// </summary>
        /// <value>Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.</value>
        [DataMember(Name = "expirationDate", EmitDefaultValue = true)]
        public DateOnly? ExpirationDate { get; set; }

        /// <summary>
        /// Linked order ID.  Биржевой номер связанной (активной) заявки.
        /// </summary>
        /// <value>Linked order ID.  Биржевой номер связанной (активной) заявки.</value>
        [DataMember(Name = "linkOrder", EmitDefaultValue = false)]
        public long LinkOrder { get; set; }

        /// <summary>
        /// Gets or Sets ValidBefore
        /// </summary>
        [DataMember(Name = "validBefore", EmitDefaultValue = false)]
        public OrderValidBefore ValidBefore { get; set; }

        /// <summary>
        /// Rejection reason or conditional order resolution.  Причина отказа или вердикт по условной заявке.
        /// </summary>
        /// <value>Rejection reason or conditional order resolution.  Причина отказа или вердикт по условной заявке.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Order No.  Номер заявки, полученной в результате исполнения стопа.
        /// </summary>
        /// <value>Order No.  Номер заявки, полученной в результате исполнения стопа.</value>
        [DataMember(Name = "orderNo", EmitDefaultValue = false)]
        public long OrderNo { get; set; }

        /// <summary>
        /// Trade No.  Номер сделки, которая привела к исполнению стопа.
        /// </summary>
        /// <value>Trade No.  Номер сделки, которая привела к исполнению стопа.</value>
        [DataMember(Name = "tradeNo", EmitDefaultValue = false)]
        public long TradeNo { get; set; }

        /// <summary>
        /// Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.
        /// </summary>
        /// <value>Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.</value>
        [DataMember(Name = "acceptedAt", EmitDefaultValue = true)]
        public DateOnly? AcceptedAt { get; set; }

        /// <summary>
        /// Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.
        /// </summary>
        /// <value>Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.</value>
        [DataMember(Name = "canceledAt", EmitDefaultValue = true)]
        public DateOnly? CanceledAt { get; set; }

        /// <summary>
        /// Price currency.  Валюта цены.
        /// </summary>
        /// <value>Price currency.  Валюта цены.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Take profit: local extremum.  Тейк профит: текущий локальный экстремум.
        /// </summary>
        /// <value>Take profit: local extremum.  Тейк профит: текущий локальный экстремум.</value>
        [DataMember(Name = "takeProfitExtremum", EmitDefaultValue = false)]
        public double TakeProfitExtremum { get; set; }

        /// <summary>
        /// Take profit: correction level.  Тейк профит: текущий уровень коррекции.
        /// </summary>
        /// <value>Take profit: correction level.  Тейк профит: текущий уровень коррекции.</value>
        [DataMember(Name = "takeProfitLevel", EmitDefaultValue = false)]
        public double TakeProfitLevel { get; set; }

        /// <summary>
        /// Gets or Sets StopLoss
        /// </summary>
        [DataMember(Name = "stopLoss", EmitDefaultValue = false)]
        public StopLoss StopLoss { get; set; }

        /// <summary>
        /// Gets or Sets TakeProfit
        /// </summary>
        [DataMember(Name = "takeProfit", EmitDefaultValue = false)]
        public TakeProfit TakeProfit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Stop {\n");
            sb.Append("  StopId: ").Append(StopId).Append("\n");
            sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            sb.Append("  SecurityBoard: ").Append(SecurityBoard).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  BuySell: ").Append(BuySell).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  LinkOrder: ").Append(LinkOrder).Append("\n");
            sb.Append("  ValidBefore: ").Append(ValidBefore).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  AcceptedAt: ").Append(AcceptedAt).Append("\n");
            sb.Append("  CanceledAt: ").Append(CanceledAt).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TakeProfitExtremum: ").Append(TakeProfitExtremum).Append("\n");
            sb.Append("  TakeProfitLevel: ").Append(TakeProfitLevel).Append("\n");
            sb.Append("  StopLoss: ").Append(StopLoss).Append("\n");
            sb.Append("  TakeProfit: ").Append(TakeProfit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
