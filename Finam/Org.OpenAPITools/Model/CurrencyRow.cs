/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Currency position.  Валютная позиция.
    /// </summary>
    [DataContract(Name = "CurrencyRow")]
    public partial class CurrencyRow : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyRow" /> class.
        /// </summary>
        /// <param name="name">Currency code.  Код валюты..</param>
        /// <param name="balance">Current position.  Текущая позиция..</param>
        /// <param name="crossRate">Currency rate for RUB.  Курс валюты к рублю..</param>
        /// <param name="equity">Equity in RUB.  Оценка в рублях..</param>
        /// <param name="unrealizedProfit">Unrealized P/L, in RUB.  Нереализованные прибыль/убытки в рублях..</param>
        public CurrencyRow(string name = default(string), double balance = default(double), double crossRate = default(double), double equity = default(double), double unrealizedProfit = default(double))
        {
            this.Name = name;
            this.Balance = balance;
            this.CrossRate = crossRate;
            this.Equity = equity;
            this.UnrealizedProfit = unrealizedProfit;
        }

        /// <summary>
        /// Currency code.  Код валюты.
        /// </summary>
        /// <value>Currency code.  Код валюты.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Current position.  Текущая позиция.
        /// </summary>
        /// <value>Current position.  Текущая позиция.</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public double Balance { get; set; }

        /// <summary>
        /// Currency rate for RUB.  Курс валюты к рублю.
        /// </summary>
        /// <value>Currency rate for RUB.  Курс валюты к рублю.</value>
        [DataMember(Name = "crossRate", EmitDefaultValue = false)]
        public double CrossRate { get; set; }

        /// <summary>
        /// Equity in RUB.  Оценка в рублях.
        /// </summary>
        /// <value>Equity in RUB.  Оценка в рублях.</value>
        [DataMember(Name = "equity", EmitDefaultValue = false)]
        public double Equity { get; set; }

        /// <summary>
        /// Unrealized P/L, in RUB.  Нереализованные прибыль/убытки в рублях.
        /// </summary>
        /// <value>Unrealized P/L, in RUB.  Нереализованные прибыль/убытки в рублях.</value>
        [DataMember(Name = "unrealizedProfit", EmitDefaultValue = false)]
        public double UnrealizedProfit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyRow {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CrossRate: ").Append(CrossRate).Append("\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("  UnrealizedProfit: ").Append(UnrealizedProfit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
