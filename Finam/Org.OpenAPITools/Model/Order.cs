/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Order.  Заявка.
    /// </summary>
    [DataContract(Name = "Order")]
    public partial class Order : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public OrderStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets BuySell
        /// </summary>
        [DataMember(Name = "buySell", EmitDefaultValue = false)]
        public BuySell? BuySell { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public Market? Market { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="orderNo">Order No. Appear only when an order is placed in OrderBook.  Биржевой номер заявки. Появляется после того, как заявка попадает в стакан..</param>
        /// <param name="transactionId">Transaction Id . Assigned when a command for new order creation is sent.  Идентификатор транзакции. Назначается после подачи команды на создание новой заявки..</param>
        /// <param name="securityCode">Security Code.  Тикер инструмента..</param>
        /// <param name="clientId">Trade Account ID.  Идентификатор торгового счёта..</param>
        /// <param name="status">status.</param>
        /// <param name="buySell">buySell.</param>
        /// <param name="createdAt">Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC..</param>
        /// <param name="price">Lot price.  Цена за лот..</param>
        /// <param name="quantity">Volume in lots.  Количество, в лотах..</param>
        /// <param name="balance">Residual volume in lots.  Неисполненный остаток, в лотах..</param>
        /// <param name="message">Rejection reason or conditional order resolution.  Причина отказа или вердикт по условной заявке..</param>
        /// <param name="currency">Price currency.  Валюта цены..</param>
        /// <param name="condition">condition.</param>
        /// <param name="validBefore">validBefore.</param>
        /// <param name="acceptedAt">Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC..</param>
        /// <param name="securityBoard">Security Board.  Основной режим торгов инструмента..</param>
        /// <param name="market">market.</param>
        public Order(long orderNo = default(long), int transactionId = default(int), string securityCode = default(string), string clientId = default(string), OrderStatus? status = default(OrderStatus?), BuySell? buySell = default(BuySell?), DateOnly? createdAt = default(DateOnly?), double price = default(double), int quantity = default(int), int balance = default(int), string message = default(string), string currency = default(string), OrderCondition condition = default(OrderCondition), OrderValidBefore validBefore = default(OrderValidBefore), DateOnly? acceptedAt = default(DateOnly?), string securityBoard = default(string), Market? market = default(Market?))
        {
            this.OrderNo = orderNo;
            this.TransactionId = transactionId;
            this.SecurityCode = securityCode;
            this.ClientId = clientId;
            this.Status = status;
            this.BuySell = buySell;
            this.CreatedAt = createdAt;
            this.Price = price;
            this.Quantity = quantity;
            this.Balance = balance;
            this.Message = message;
            this.Currency = currency;
            this.Condition = condition;
            this.ValidBefore = validBefore;
            this.AcceptedAt = acceptedAt;
            this.SecurityBoard = securityBoard;
            this.Market = market;
        }

        /// <summary>
        /// Order No. Appear only when an order is placed in OrderBook.  Биржевой номер заявки. Появляется после того, как заявка попадает в стакан.
        /// </summary>
        /// <value>Order No. Appear only when an order is placed in OrderBook.  Биржевой номер заявки. Появляется после того, как заявка попадает в стакан.</value>
        [DataMember(Name = "orderNo", EmitDefaultValue = false)]
        public long OrderNo { get; set; }

        /// <summary>
        /// Transaction Id . Assigned when a command for new order creation is sent.  Идентификатор транзакции. Назначается после подачи команды на создание новой заявки.
        /// </summary>
        /// <value>Transaction Id . Assigned when a command for new order creation is sent.  Идентификатор транзакции. Назначается после подачи команды на создание новой заявки.</value>
        [DataMember(Name = "transactionId", EmitDefaultValue = false)]
        public int TransactionId { get; set; }

        /// <summary>
        /// Security Code.  Тикер инструмента.
        /// </summary>
        /// <value>Security Code.  Тикер инструмента.</value>
        [DataMember(Name = "securityCode", EmitDefaultValue = true)]
        public string SecurityCode { get; set; }

        /// <summary>
        /// Trade Account ID.  Идентификатор торгового счёта.
        /// </summary>
        /// <value>Trade Account ID.  Идентификатор торгового счёта.</value>
        [DataMember(Name = "clientId", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.
        /// </summary>
        /// <value>Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = true)]
        public DateOnly? CreatedAt { get; set; }

        /// <summary>
        /// Lot price.  Цена за лот.
        /// </summary>
        /// <value>Lot price.  Цена за лот.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Volume in lots.  Количество, в лотах.
        /// </summary>
        /// <value>Volume in lots.  Количество, в лотах.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Residual volume in lots.  Неисполненный остаток, в лотах.
        /// </summary>
        /// <value>Residual volume in lots.  Неисполненный остаток, в лотах.</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public int Balance { get; set; }

        /// <summary>
        /// Rejection reason or conditional order resolution.  Причина отказа или вердикт по условной заявке.
        /// </summary>
        /// <value>Rejection reason or conditional order resolution.  Причина отказа или вердикт по условной заявке.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Price currency.  Валюта цены.
        /// </summary>
        /// <value>Price currency.  Валюта цены.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public OrderCondition Condition { get; set; }

        /// <summary>
        /// Gets or Sets ValidBefore
        /// </summary>
        [DataMember(Name = "validBefore", EmitDefaultValue = false)]
        public OrderValidBefore ValidBefore { get; set; }

        /// <summary>
        /// Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.
        /// </summary>
        /// <value>Time of order canceled on the server in UTC.  Время, когда заявка была отменена на сервере. В UTC.</value>
        [DataMember(Name = "acceptedAt", EmitDefaultValue = true)]
        public DateOnly? AcceptedAt { get; set; }

        /// <summary>
        /// Security Board.  Основной режим торгов инструмента.
        /// </summary>
        /// <value>Security Board.  Основной режим торгов инструмента.</value>
        [DataMember(Name = "securityBoard", EmitDefaultValue = true)]
        public string SecurityBoard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BuySell: ").Append(BuySell).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ValidBefore: ").Append(ValidBefore).Append("\n");
            sb.Append("  AcceptedAt: ").Append(AcceptedAt).Append("\n");
            sb.Append("  SecurityBoard: ").Append(SecurityBoard).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
