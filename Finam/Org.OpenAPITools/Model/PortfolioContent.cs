/*
 * Trade API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: current
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// What kind of data the response contains.  Какие данные будут в ответе.
    /// </summary>
    [DataContract(Name = "PortfolioContent")]
    public partial class PortfolioContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioContent" /> class.
        /// </summary>
        /// <param name="includeCurrencies">Currency positions.  Валютные позиции..</param>
        /// <param name="includeMoney">Money positions.  Денежные позиции..</param>
        /// <param name="includePositions">DEPO positions.  Позиции DEPO..</param>
        /// <param name="includeMaxBuySell">Buy and Sell limits.  Лимиты покупки и продажи..</param>
        public PortfolioContent(bool includeCurrencies = default(bool), bool includeMoney = default(bool), bool includePositions = default(bool), bool includeMaxBuySell = default(bool))
        {
            this.IncludeCurrencies = includeCurrencies;
            this.IncludeMoney = includeMoney;
            this.IncludePositions = includePositions;
            this.IncludeMaxBuySell = includeMaxBuySell;
        }

        /// <summary>
        /// Currency positions.  Валютные позиции.
        /// </summary>
        /// <value>Currency positions.  Валютные позиции.</value>
        [DataMember(Name = "includeCurrencies", EmitDefaultValue = true)]
        public bool IncludeCurrencies { get; set; }

        /// <summary>
        /// Money positions.  Денежные позиции.
        /// </summary>
        /// <value>Money positions.  Денежные позиции.</value>
        [DataMember(Name = "includeMoney", EmitDefaultValue = true)]
        public bool IncludeMoney { get; set; }

        /// <summary>
        /// DEPO positions.  Позиции DEPO.
        /// </summary>
        /// <value>DEPO positions.  Позиции DEPO.</value>
        [DataMember(Name = "includePositions", EmitDefaultValue = true)]
        public bool IncludePositions { get; set; }

        /// <summary>
        /// Buy and Sell limits.  Лимиты покупки и продажи.
        /// </summary>
        /// <value>Buy and Sell limits.  Лимиты покупки и продажи.</value>
        [DataMember(Name = "includeMaxBuySell", EmitDefaultValue = true)]
        public bool IncludeMaxBuySell { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortfolioContent {\n");
            sb.Append("  IncludeCurrencies: ").Append(IncludeCurrencies).Append("\n");
            sb.Append("  IncludeMoney: ").Append(IncludeMoney).Append("\n");
            sb.Append("  IncludePositions: ").Append(IncludePositions).Append("\n");
            sb.Append("  IncludeMaxBuySell: ").Append(IncludeMaxBuySell).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
